#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var createElement = require( './../lib' );


// VARIABLES //

var args;
var html;


// FUNCTIONS //

/**
* FUNCTION: onClose()
*	Callback invoked upon writing a file to `stdout`.
*
* @private
*/
function onClose() {
	process.exit( 0 );
}


// INIT //

process.stdout.on( 'error', process.exit );


// PACKAGE UPDATES //

notifier( { 'pkg': pkg } ).notify();


// ARGUMENTS //

args = parseArgs( process.argv.slice( 2 ), opts );


// HELP //

if ( args.help ) {
	fs.createReadStream( path.join( __dirname, 'usage.txt' ) )
		.pipe( process.stdout )
		.on( 'close', onClose );
    return;
}


// VERSION //

if ( args.version ) {
	console.log( pkg.version );
	return;
}


// OPTIONS //

opts = {};

if ( args[ 'class' ] ) {
	opts.className = args[ 'class' ];
}
if ( args.align ) {
	opts.align = args.align;
}
if ( args.raw ) {
	opts.raw = args.raw;
}
if ( args.label ) {
	opts.label = args.label;
}
if ( args.src ) {
	opts.src = args.src;
}
if ( args.alt ) {
	opts.alt = args.alt;
}


// EQUATION ELEMENT //

html = createElement( opts );

process.stdout.write( html+'\n', 'utf8' );
process.exit( 0 );
